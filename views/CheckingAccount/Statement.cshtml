@using Newtonsoft.Json;
@model IEnumerable<AutomatedTellerMachine.Models.Transaction>

@{
    ViewBag.Title = "Statement";
}

<h2>Statement</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <td><strong>Transaction ID</strong></td>
            <td><strong>Amount</strong></td>
        </tr>
    </thead>
    <tbody data-bind="foreach:currentTransactions">
        <tr>
            <td data-bind="text:Id"></td>
            <td data-bind="text:formattedPrice(Amount)"></td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <td colspan="2">
                <span data-bind="click:previousPage, visible:currentPage > 1" class="glyphicon glyphicon-circle-arrow-left" style="cursor:pointer;"></span>
                <span data-bind="text:currentPage"></span>
                <span data-bind="click:nextPage, visible:currentPage < lastPage" class="glyphicon glyphicon-circle-arrow-right" style="cursor:pointer;"></span>
            </td>
        </tr>
    </tfoot>
</table>

<script src="~/Scripts/knockout-3.3.0.js"></script>
<script>
    function formattedPrice(amount) {
        var price = amount.toFixed(2)
        return price;
    }

    function StatementViewModel() {
        var self = this;

        self.transactions = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings { 
                           ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
        self.pageSize = 5;
        self.currentPage = ko.observable(1);
        self.lastPage = Math.ceil(self.transactions.length / self.pageSize);
        self.currentTransactions = ko.computed(function () {
            var startIndex = (self.currentPage() - 1) * self.pageSize;
            var endIndex = startIndex + self.pageSize;
            return self.transactions.slice(startIndex, endIndex);
        });

        self.nextPage = function () {
            self.currentPage(self.currentPage() + 1);
        };

        self.previousPage = function () {
            self.currentPage(self.currentPage() - 1);
        };
    };

    ko.applyBindings(new StatementViewModel());
</script>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Amount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CheckingAcountId)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Amount)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CheckingAcountId)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>
